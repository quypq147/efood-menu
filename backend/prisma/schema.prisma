// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  users       User[]
  permissions RolePermission[]
}

model RolePermission {
  id           Int @id @default(autoincrement())
  roleId       Int
  permissionId Int

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  foodId    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  food      Food     @relation(fields: [foodId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  foodId    Int
  user      User     @relation(fields: [userId], references: [id])
  food      Food     @relation(fields: [foodId], references: [id])
  createdAt DateTime @default(now())
}

model Permission {
  id    Int              @id @default(autoincrement())
  name  String           @unique
  roles RolePermission[]
}

model User {
  id               Int       @id @default(autoincrement())
  fullname         String
  username         String    @unique
  email            String    @unique
  password         String
  phoneNumber      String?
  address          String?
  birthDate        DateTime?
  roleId           Int
  isEmailVerified  Boolean   @default(false)
  emailVerifyToken String?
  resetToken       String?
  resetTokenExp    DateTime?
  role             Role      @relation(fields: [roleId], references: [id])
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  reviews          Review[]
  comments         Comment[]
  emailToken       String?

  Order Order[]
}

model Category {
  id        Int    @id @default(autoincrement())
  name      String @unique
  FoodItems Food[]
}

model Food {
  id          Int      @id @default(autoincrement())
  name        String  @unique
  description String?
  price       Float
  image       String
  status      Boolean  @default(true)
  quantity    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])

  items   OrderItem[]
  reviews Review[]

  Comment Comment[]
}

model Order {
  id          Int         @id @default(autoincrement())
  orderNumber String      @unique
  userId      Int?
  total       Float
  serverType  String?
  status      OrderStatus @default(PENDING) // Trạng thái đơn hàng (pending, completed, cancelled)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User? @relation(fields: [userId], references: [id])
  items      OrderItem[]

  Invoice Invoice[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  foodId    Int
  quantity  Int
  price     Float
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  food      Food     @relation(fields: [foodId], references: [id])
}
model Invoice {
  id           Int       @id @default(autoincrement())
  orderId      Int       @unique
  order        Order     @relation(fields: [orderId], references: [id])
  issuedAt     DateTime  @default(now())
  total        Float
  customerName String?
  customerPhone String?
  paymentType  String?   // Stripe, MoMo, Tiền mặt, v.v.
  status       String    // PAID, UNPAID, CANCELLED, ...
}
enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}
